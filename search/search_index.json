{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Riven","text":""},{"location":"#overview","title":"Overview","text":"<p>Under Development</p> <p>Riven is under active development, expect breaking changes and bugs.</p> <p>Riven is an advanced media management and streaming solution designed to integrate with various media servers and third-party services. It automates the process of finding, downloading, and organizing media content, making it instantly available for streaming through your preferred media server.</p> <p>Riven streamlines your media consumption experience by:</p> <ol> <li>Automatically discovering new content based on your preferences and watchlists.</li> <li>Efficiently searching for and downloading high-quality media files.</li> <li>Organizing your media library using a smart symlink system.</li> <li>Seamlessly integrating with your chosen media server for immediate streaming access.</li> <li>Providing a user-friendly web interface for easy management and configuration.</li> </ol> <p>Whether you're a casual viewer or a media enthusiast, Riven offers a powerful, automated solution to keep your media library up-to-date and easily accessible.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before installing Riven, ensure you have the following prerequisites:</p> <p>Note</p> <ul> <li>Linux: Riven only supports Linux-based operating systems.</li> <li>Windows: Riven only supports Windows Subsystem for Linux (WSL) in Windows.</li> <li>Rclone: Required to mount debrid service. Additionally, Zurg is preferred for Real-Debrid users. Learn more</li> <li>Media Server: Plex, Jellyfin, and Emby are supported.</li> <li>Docker: Required to run Riven in a containerized environment. Learn more</li> </ul> <p>Debrid Support</p> <p>Currently only Real-Debrid, All-Debrid and Torbox are supported. More services will be added in the future!</p>"},{"location":"#setup","title":"Setup","text":"<p>Before we begin, we need to set up the required folders and files for Riven.</p>"},{"location":"#clone-repository-and-create-folders","title":"Clone repository and create folders","text":"<pre><code>git clone https://github.com/rivenmedia/riven\ncd riven\nmkdir data\n</code></pre> <p><code>riven</code> folder consists of <code>data</code> folder and <code>docker-compose.yml</code> file which will be used later.</p> <p> </p>"},{"location":"#setup-library-folder","title":"Setup Library folder","text":""},{"location":"#what-is-library-folder","title":"What is Library folder?","text":"<p>Library folder is the folder where Riven will store movie/show files and symlinks. These point to the actual files on the rclone mount</p> <p>For this example, we are assuming <code>/mnt/zurg</code> is the rclone mount path.</p> <pre><code>sudo mkdir -p /mnt/library\n</code></pre> <p> </p>"},{"location":"#installation","title":"Installation","text":"<p><code>docker-compose.yml</code> file is used to run Riven in a containerized environment. It consists of three services:</p> <ol> <li><code>riven</code>: The main Riven application.</li> <li><code>riven-frontend</code>: The web interface for Riven.</li> <li><code>riven-db</code>: The database for Riven.</li> </ol> docker-compose.yml<pre><code>services:\n    riven-frontend:\n        image: spoked/riven-frontend:latest\n        container_name: riven-frontend\n        restart: unless-stopped\n        ports:\n            - \"3000:3000\"\n        tty: true\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=America/New_York\n            - ORIGIN=http://localhost:3000\n            - BACKEND_URL=http://riven:8080\n            - DIALECT=postgres\n            - DATABASE_URL=postgres://postgres:postgres@riven-db/riven\n        depends_on:\n            riven:\n                condition: service_healthy\n\n    riven:\n        image: spoked/riven:latest\n        container_name: riven\n        restart: unless-stopped\n        ports:\n            - \"8080:8080\"\n        tty: true\n        environment:\n            - PUID=1000\n            - PGID=1000\n            - TZ=America/New_York\n            - RIVEN_FORCE_ENV=true\n            - RIVEN_DATABASE_HOST=postgresql+psycopg2://postgres:postgres@riven-db/riven\n        healthcheck:\n            test: curl -s http://localhost:8080 &gt;/dev/null || exit 1\n            interval: 30s\n            timeout: 10s\n            retries: 10\n        volumes:\n            - ./data:/riven/data\n            - /mnt:/mnt\n        depends_on:\n            riven_postgres:\n                condition: service_healthy\n\n    riven_postgres:\n        image: postgres:16.3-alpine3.20\n        container_name: riven-db\n        environment:\n            PGDATA: /var/lib/postgresql/data/pgdata\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: postgres\n            POSTGRES_DB: riven\n        volumes:\n            - ./riven-db:/var/lib/postgresql/data/pgdata\n        healthcheck:\n            test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n            interval: 10s\n            timeout: 5s\n            retries: 5\n</code></pre> <p>Now this won't work as is, you need to modify the <code>docker-compose.yml</code> file to match your setup.</p> <ol> <li>Change <code>TZ</code> to your timezone.</li> <li>Change <code>ORIGIN</code> to the URL you will be accessing the web interface from. For example, if you are planning to run Riven on <code>https://riven.example.com</code>,    change it to <code>https://riven.example.com</code>. This is not required if you are running riven behind a reverse proxy like <code>nginx</code>, <code>caddy</code>, <code>cosmos</code> etc.</li> <li>Change <code>BACKEND_URL</code> to the URL where the frontend can access the backend. This is not required here as we are running both frontend and backend in the same network (stack).</li> <li>Change <code>RIVEN_DATABASE_HOST</code> to the URL where the backend can access the database. This is not required here as we are running both backend and database in the same network (stack).</li> <li>Change <code>DIALECT</code> and <code>DATABASE_URL</code> to use the same database as the backend. This is not required here as we are running both backend and database in the same network (stack).</li> <li>Change <code>volumes</code> to match your setup. Riven requires access to the library folder and rclone mount path.</li> </ol>"},{"location":"#running-riven","title":"Running Riven","text":"<p>To run Riven, execute the following command:</p> <pre><code>docker-compose up -d\n</code></pre> <p>This command will start the Riven services in the background. You can access the Riven web interface by navigating to the specified <code>ORIGIN</code> URL or reverse proxy URL.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>Once Riven is running, you can configure it by accessing the web interface. You will be prompted with onboarding steps to set up your debrid service, media server, content services and scraper services.</p> <p>There are 4 steps in the onboarding process.</p>"},{"location":"#step-1-general-settings","title":"Step 1: General Settings","text":"<p>In this step you configure the downloaders (debrid services), rclone mount path, library path, subtitles, etc. See the image below for an example.</p> <p></p>"},{"location":"#step-2-media-server","title":"Step 2: Media Server","text":"<p>In this step you configure the media server and updater settings. See the image below for an example.</p> <p></p>"},{"location":"#step-3-content-services","title":"Step 3: Content Services","text":"<p>In this step you configure the content services like trakt, overseerr, etc. See the image below for an example.</p> <p></p>"},{"location":"#step-4-scraper-services","title":"Step 4: Scraper Services","text":"<p>In this step you configure the scraper services like torrentio, zilean, prowlarr, jackett, etc. See the image below for an example.</p> <p></p>"},{"location":"#done","title":"Done!","text":"<p>Once you have completed the onboarding process, you will be greeted with a beautiful dashboard where you can manage your media library, request items, settings and many more in the future.</p> <p></p>"},{"location":"#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Cross-site POST form submissions are forbidden</p> <p>The most common reason for this is that you may have not setup <code>ORIGIN</code> correctly in the <code>docker-compose.yml</code> file. If you are running Riven behind a reverse proxy, you can remove the <code>ORIGIN</code> environment variable from the <code>riven-frontend</code> service.</p> <p>I am seeing error when trying to save changes</p> <p>If you are seeing an error when trying to save changes, it is most likely due to incorrect configuration or backend failure. Please check the logs of the riven service to see the error message. If you are unable to resolve the issue, feel free to ask for help in the Riven Discord server.</p> <p>I am stuck in onboarding loop</p> <p>If you are stuck in the onboarding loop, it is most likely due to symlink settings being wrong. Check your library path and rclone mount path. If they are correct, check the logs of the riven service. If you are unable to resolve the issue, feel free to ask for help in the Riven Discord server.</p>"},{"location":"contribute/","title":"Contributing to Documentation","text":"<p>Thank you for considering contributing to Riven Media! We welcome contributions from the community to help improve and expand the project. This guide will help you get started with the process of contributing.</p>"},{"location":"contribute/#table-of-contents","title":"Table of Contents","text":"<ol> <li>How to Contribute</li> <li>Setting Up Your Development Environment</li> <li>Submitting Changes</li> <li>Community</li> </ol>"},{"location":"contribute/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contribute/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please report it by creating an issue on our GitHub repository. Provide as much detail as possible, including steps to reproduce the issue and any relevant logs or screenshots.</p>"},{"location":"contribute/#suggesting-features","title":"Suggesting Features","text":"<p>We welcome feature suggestions! To suggest a new feature, please create an issue on our GitHub repository and describe your idea in detail. Include any potential use cases and benefits of the feature.</p>"},{"location":"contribute/#contributing-code","title":"Contributing Code","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Create a new branch for your feature or bugfix.</li> <li>Write clear and concise commit messages.</li> <li>Ensure your code follows the project's coding standards and passes all tests.</li> <li>Submit a pull request to the <code>main</code> branch.</li> </ol>"},{"location":"contribute/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>To set up your development environment, follow these steps:</p> <ol> <li> <p>Clone the repository:     <pre><code>git clone https://github.com/rivenmedia/wiki riven-wiki &amp;&amp; cd riven-wiki\n</code></pre></p> </li> <li> <p>Install the required dependencies:     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Start the development server:     <pre><code>mkdocs serve -a 0.0.0.0:8282\n</code></pre></p> </li> </ol> <p>Alternatively..</p> <p>You can also use <code>make install</code> to install the dependencies, followed by <code>make serve</code> to start the development server.</p>"},{"location":"contribute/#submitting-changes","title":"Submitting Changes","text":"<p>When submitting changes, please ensure the following:</p> <ol> <li>Your commit messages follow the Conventional Commits specification.</li> <li>Your pull request includes a clear description of the changes and the related issue (if applicable).</li> </ol>"},{"location":"contribute/#community","title":"Community","text":"<p>Join our community on Discord to discuss the project, ask questions, and collaborate with other contributors.</p> <p>Thank you for your contributions!</p>"},{"location":"services/","title":"Index","text":"<p>Coming soon!</p>"},{"location":"services/content/","title":"Content","text":"<p>Riven supports various content services to help you manage and update your media library. Below is a list of the supported services, their configuration options, and examples of what to enter for each field.</p>"},{"location":"services/content/#available-services","title":"Available Services","text":"<ul> <li>Overseerr</li> <li>Plex Watchlist</li> <li>Mdblist</li> <li>Listrr</li> <li>Trakt</li> </ul> <p>Lists support multiple values</p> <p>Some settings have lists that support multiple values. These are noted in the description of the setting.</p> <ul> <li>Example: <code>[\"value1\", \"value2\"]</code></li> </ul>"},{"location":"services/content/#overseerr","title":"Overseerr","text":"<p>Overseerr is a request management and media discovery tool. It helps you manage requests for your media library.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>url (string): The URL of your Overseerr instance. Default is \"http://localhost:5055\".<ul> <li>Example: <code>\"http://localhost:5055\"</code></li> </ul> </li> <li>api_key (string): The API key for accessing Overseerr.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>use_webhook (boolean): Boolean value to enable or disable the use of webhooks. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> </ul>"},{"location":"services/content/#plex-watchlist","title":"Plex Watchlist","text":"<p>Plex Watchlist allows you to keep track of your desired media content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>rss (list of strings): A list of RSS feed URLs for your Plex Watchlist.<ul> <li>Example: <code>[\"https://rss.plex.tv/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"]</code></li> </ul> </li> </ul>"},{"location":"services/content/#mdblist","title":"Mdblist","text":"<p>Mdblist is a service that provides curated lists of media content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 300 seconds.<ul> <li>Example: <code>300</code></li> </ul> </li> <li>api_key (string): The API key for accessing Mdblist.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>lists (list of strings): A list of Mdblist URLs for curated media lists.<ul> <li>Example: <code>[\"https://mdblist.com/lists/xxxxxxx/xxxxxxxxxx\"]</code></li> </ul> </li> </ul> <p>lists also accept a list of ids</p> <ul> <li>Example: <code>[\"123456\", \"654321\"]</code></li> </ul>"},{"location":"services/content/#listrr","title":"Listrr","text":"<p>Listrr is a service for managing movie and show lists.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 300 seconds.<ul> <li>Example: <code>300</code></li> </ul> </li> <li>movie_lists (list of ints): A list of IDs for movie lists.<ul> <li>Example: <code>[123456, 789012]</code></li> </ul> </li> <li>show_lists (list of ints): A list of IDs for show lists.<ul> <li>Example: <code>[345678, 901234]</code></li> </ul> </li> <li>api_key (string): The API key for accessing Listrr.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> </ul>"},{"location":"services/content/#trakt","title":"Trakt","text":"<p>Trakt is a service that helps you keep track of what you're watching and discover new content.</p> <ul> <li>enabled (boolean): Boolean value to enable or disable the service. Default is false.<ul> <li>Example: <code>false</code></li> </ul> </li> <li>update_interval (integer): The interval in seconds at which the service will check for updates. Default is 60 seconds.<ul> <li>Example: <code>60</code></li> </ul> </li> <li>api_key (string): The API key for accessing Trakt.<ul> <li>Example: <code>\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</code></li> </ul> </li> <li>watchlist (list of strings): A list of Trakt usernames.<ul> <li>Example: <code>[\"username1\", \"username2\"]</code></li> </ul> </li> <li>user_lists (list of strings): A list of Trakt user list URLs.<ul> <li>Example: <code>[\"https://trakt.tv/users/username/lists/xxxxxxxx\"]</code></li> </ul> </li> <li>collection (list of strings): A list of Trakt collection usernames.<ul> <li>Example: <code>[\"username1\", \"username2\"]</code></li> </ul> </li> <li>fetch_trending (boolean): Boolean value to enable or disable fetching trending content. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>trending_count (integer): The number of trending items to fetch. Default is 10.<ul> <li>Example: <code>10</code></li> </ul> </li> <li>fetch_popular (boolean): Boolean value to enable or disable fetching popular content. Default is true.<ul> <li>Example: <code>true</code></li> </ul> </li> <li>popular_count (integer): The number of popular items to fetch. Default is 10.<ul> <li>Example: <code>10</code></li> </ul> </li> </ul>"},{"location":"services/downloaders/","title":"Downloaders","text":"<p>Coming soon!</p>"},{"location":"services/scrapers/","title":"Scrapers","text":"<p>Coming soon!</p>"}]}